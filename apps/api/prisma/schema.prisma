// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  passwordHash  String?
  emailVerified Boolean   @default(false)
  mfaEnabled    Boolean   @default(false)
  mfaEnrolledAt DateTime?
  lastMfaAt     DateTime?
  mfaSecret     String?
  mfaVerifiedAt DateTime?
  isAdmin       Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  isSuspended   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions          Session[]
  messages          Message[]
  labels            Label[]
  policies          Policy[]
  auditEvents       AuditEvent[] @relation("AuditActor")
  webauthnCreds     WebAuthnCredential[]
  oidcIdentities    OIDCIdentity[]
  settings          UserSettings?
  attachments       Attachment[]
  rules             Rule[]
  ruleExecutions    RuleExecution[]
  ruleAuditLogs     RuleAuditLog[]
  ruleJobQueue      RuleJobQueue[]
  systemPolicies    SystemPolicy[] @relation("SystemPolicyCreatedBy")
  trustedSenders    TrustedSender[] @relation("TrustedSenderCreatedBy")
  
  // TOTP MFA relations
  mfaTotp           UserMfaTotp?
  mfaRecoveryCodes  UserMfaRecoveryCode[]
  trustedDevices    TrustedDevice[]

  @@map("users")
}

model Session {
  id          String    @id @default(cuid())
  userId      String
  tokenHash   String    @unique
  deviceInfo  String?
  ipAddress   String
  userAgent   String?
  expiresAt   DateTime
  isRevoked   Boolean   @default(false)
  mfaLevel    MfaLevel  @default(NONE)
  amr         String[]  @default([]) // Authentication Methods Reference: ["pwd"], ["pwd","otp"], ["pwd","passkey"]
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id          String    @id @default(cuid())
  messageId   String    @unique // RFC 2822 Message-ID
  threadId    String?
  userId      String
  from        String
  to          String[]
  cc          String[]  @default([])
  bcc         String[]  @default([])
  subject     String
  body        String
  htmlBody    String?
  flags       String[]  @default([])
  folder      String    @default("inbox")
  priority    String    @default("normal")
  sentAt      DateTime?
  receivedAt  DateTime?
  snoozedUntil DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  messageLabels MessageLabel[]
  ruleExecutions RuleExecution[]
  ruleAuditLogs RuleAuditLog[]

  @@map("messages")
}

model Attachment {
  id          String    @id @default(cuid())
  messageId   String?
  userId      String
  filename    String
  contentType String
  size        Int
  contentId   String?
  disposition String    @default("attachment")
  path        String    // File system path
  url         String?   // Public URL
  createdAt   DateTime  @default(now())

  // Relations
  message     Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Label {
  id        String    @id @default(cuid())
  name      String
  color     String    @default("#000000")
  userId    String
  createdAt DateTime  @default(now())

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageLabels MessageLabel[]

  @@unique([userId, name])
  @@map("labels")
}

model MessageLabel {
  messageId String
  labelId   String
  createdAt DateTime @default(now())

  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([messageId, labelId])
  @@map("message_labels")
}

model Policy {
  id        String    @id @default(cuid())
  userId    String
  type      String    // trusted_sender, block_sender, spam_filter
  value     String    // email or domain
  action    String    // allow, block, mark_as_spam
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, value])
  @@map("policies")
}

model AuditEvent {
  id            String    @id @default(uuid())
  ts            DateTime  @default(now())
  actorId       String?   // uuid, nullable
  actorEmail    String?   // text
  action        String    // e.g., "user.update", "policy.save", "quarantine.release"
  resourceType  String    // "user", "policy", "quarantine", "deliverability", etc.
  resourceId    String?   // uuid or natural key as text
  result        AuditResult @default(SUCCESS) // "success" | "failure"
  ip            String?   // inet
  userAgent     String?   // text
  metadata      Json?     // jsonb - diff or extra context

  // Relations
  actor         User?     @relation("AuditActor", fields: [actorId], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([ts(sort: Desc)])
  @@index([actorEmail])
  @@index([action])
  @@index([resourceType, resourceId])
  @@index([result])
  
  // TODO: Add retention policy job to keep â‰¥ 400 days
  @@map("audit_events")
}

enum AuditResult {
  SUCCESS
  FAILURE
}

model WebAuthnCredential {
  id              String    @id @default(cuid())
  userId          String
  credentialId    String    @unique
  publicKey       String
  counter         Int       @default(0)
  transports      String[]  @default([])
  aaguid          String?
  name            String?
  createdAt       DateTime  @default(now())
  lastUsedAt      DateTime?

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webauthn_credentials")
}

model OIDCIdentity {
  id          String    @id @default(cuid())
  userId      String
  provider    String    // google, entra
  providerId  String    // Provider's user ID
  email       String
  name        String?
  picture     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("oidc_identities")
}

model UserSettings {
  id              String    @id @default(cuid())
  userId          String    @unique
  theme           String    @default("system")
  language        String    @default("en")
  timezone        String    @default("UTC")
  emailSignature  String?
  autoReply       Json?
  notifications   Json?
  privacy         Json?
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Rule {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  isEnabled   Boolean   @default(true)
  priority    Int       @default(0) // Higher numbers = higher priority
  conditions  Json      // Array of condition objects
  actions     Json      // Array of action objects
  triggers    String[]  @default(["on-receive"]) // on-receive, on-send, manual
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions      RuleExecution[]
  auditLogs       RuleAuditLog[]

  @@map("rules")
}

model RuleExecution {
  id              String    @id @default(cuid())
  ruleId          String
  messageId       String?
  userId          String
  trigger         String    // on-receive, on-send, manual
  status          String    // success, failure, skipped
  executionTimeMs Int
  actionsApplied  Json      // Array of applied actions
  error           String?
  metadata        Json?
  createdAt       DateTime  @default(now())

  // Relations
  rule            Rule      @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  message         Message?  @relation(fields: [messageId], references: [id], onDelete: SetNull)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rule_executions")
}

model RuleAuditLog {
  id          String    @id @default(cuid())
  ruleId      String
  messageId   String?
  userId      String
  action      String    // created, updated, deleted, executed
  changes     Json?     // What changed (for updates)
  outcome     Json?     // Execution outcome
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  // Relations
  rule        Rule      @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  message     Message?  @relation(fields: [messageId], references: [id], onDelete: SetNull)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rule_audit_logs")
}

model RuleJobQueue {
  id            String    @id @default(cuid())
  userId        String
  jobType       String    // run-on-existing, batch-process
  status        String    // pending, running, completed, failed
  progress      Int       @default(0) // 0-100
  totalItems    Int       @default(0)
  processedItems Int      @default(0)
  failedItems   Int       @default(0)
  parameters    Json?     // Job-specific parameters
  result        Json?     // Job result data
  error         String?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rule_job_queue")
}

// System policies for admin configuration
model SystemPolicy {
  id          String   @id @default(cuid())
  type        String   @unique // password, mfa, external-banner
  settings    Json     // Policy-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  createdBy   User     @relation("SystemPolicyCreatedBy", fields: [createdById], references: [id])

  @@map("system_policies")
}

// Trusted senders for policy management
model TrustedSender {
  id          String   @id @default(cuid())
  email       String   @unique
  domain      String?
  createdAt   DateTime @default(now())
  createdById String

  // Relations
  createdBy   User     @relation("TrustedSenderCreatedBy", fields: [createdById], references: [id])

  @@map("trusted_senders")
}

// TOTP MFA models
model UserMfaTotp {
  id              String   @id @default(cuid())
  userId          String   @unique
  secretCiphertext Bytes
  secretNonce     Bytes
  issuer          String   @default("CEERION")
  label           String   // User's email
  digits          Int      @default(6)
  period          Int      @default(30)
  algorithm       String   @default("SHA1")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_mfa_totp")
}

model UserMfaRecoveryCode {
  id        String    @id @default(cuid())
  userId    String
  codeHash  String
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_mfa_recovery_codes")
}

model TrustedDevice {
  id          String   @id @default(uuid())
  userId      String
  deviceHash  String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  userAgent   String?
  ipAddress   String?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceHash])
  @@map("trusted_devices")
}

model OrgPolicy {
  id                 String   @id @default(cuid())
  requireMfa         Boolean  @default(false)
  gracePeriodDays    Int      @default(0)
  rememberDeviceDays Int      @default(30)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("org_policies")
}

// Enums
enum MfaLevel {
  NONE
  OTP
  PASSKEY
}
