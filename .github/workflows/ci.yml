name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.0.0'

jobs:
  # Fast feedback - basic checks
  lint-and-typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

  # Contract drift detection - critical gate
  contract-drift:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: OpenAPI Contract Check
        run: pnpm --filter @ceerion/contracts run openapi:check

      - name: Generate SDK from OpenAPI
        run: pnpm --filter @ceerion/sdk run generate

      - name: Check for contract drift
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ Contract drift detected! Generated SDK differs from committed version."
            echo "Changed files:"
            git status --porcelain
            echo "Diff:"
            git diff
            exit 1
          else
            echo "✅ No contract drift detected"
          fi

  # Backend tests with infrastructure
  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ceerion_mail_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Database migrations
        run: pnpm --filter @ceerion/api run db:push
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test

      - name: Run backend tests
        run: pnpm --filter @ceerion/api test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Build API
        run: pnpm --filter @ceerion/api build

  # E2E Smoke Tests - Critical user flows
  e2e-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ceerion_mail_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm --filter @ceerion/e2e-tests exec playwright install --with-deps

      - name: Database setup
        run: pnpm --filter @ceerion/api run db:push
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test

      - name: Build applications
        run: pnpm build

      - name: Run Playwright smoke tests
        run: pnpm --filter @ceerion/e2e-tests test:smoke
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test
          REDIS_URL: redis://localhost:6379
          CI: true

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: packages/e2e-tests/playwright-report/
          retention-days: 30

  # Lighthouse Performance Budgets
  lighthouse-budgets:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ceerion_mail_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm --filter @ceerion/e2e-tests exec playwright install --with-deps chromium

      - name: Database setup
        run: pnpm --filter @ceerion/api run db:push
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test

      - name: Build applications
        run: pnpm build

      - name: Run Lighthouse performance tests
        run: pnpm --filter @ceerion/e2e-tests test:lighthouse
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test
          REDIS_URL: redis://localhost:6379
          CI: true

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: packages/e2e-tests/test-results/
          retention-days: 30

  # Accessibility Tests
  accessibility:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ceerion_mail_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm --filter @ceerion/e2e-tests exec playwright install --with-deps chromium

      - name: Database setup
        run: pnpm --filter @ceerion/api run db:push
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test

      - name: Build applications
        run: pnpm build

      - name: Run accessibility tests
        run: pnpm --filter @ceerion/e2e-tests test:a11y
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ceerion_mail_test
          REDIS_URL: redis://localhost:6379
          CI: true

      - name: Upload A11y Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports
          path: packages/e2e-tests/test-results/
          retention-days: 30

  # Security & Quality Gates
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: License compliance check
        run: pnpm --filter @ceerion/contracts run license:check || echo "License check skipped"

  # Final gate - all checks must pass
  all-checks:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, contract-drift, backend-tests, e2e-smoke, lighthouse-budgets, accessibility, security-scan]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" ]]; then
            echo "❌ Lint and typecheck failed"
            exit 1
          fi
          if [[ "${{ needs.contract-drift.result }}" != "success" ]]; then
            echo "❌ Contract drift detected"
            exit 1
          fi
          if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e-smoke.result }}" != "success" ]]; then
            echo "❌ E2E smoke tests failed"
            exit 1
          fi
          if [[ "${{ needs.lighthouse-budgets.result }}" != "success" ]]; then
            echo "❌ Lighthouse performance budgets failed"
            exit 1
          fi
          if [[ "${{ needs.accessibility.result }}" != "success" ]]; then
            echo "❌ Accessibility tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ All CI checks passed! Ready to merge."

      - name: Success notification
        run: |
          echo "🎉 CEERION Mail CI Pipeline Successful!"
          echo "✅ Contract integrity maintained"
          echo "✅ Performance budgets met (LCP ≤ 2.2s, INP ≤ 200ms)"
          echo "✅ Accessibility standards compliant (WCAG 2.1 AA)"
          echo "✅ All critical user flows tested"
          echo "✅ Security vulnerabilities checked"
