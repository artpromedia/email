/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/healthz": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health check endpoint */
    get: operations["healthCheck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/readyz": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Readiness check endpoint */
    get: operations["readinessCheck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** User login with email/password */
    post: operations["login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout user and invalidate tokens */
    post: operations["logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh access token */
    post: operations["refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/mfa/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify MFA token */
    post: operations["verifyMFA"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/password/reset/request": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request password reset */
    post: operations["requestPasswordReset"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/password/reset/confirm": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Confirm password reset */
    post: operations["confirmPasswordReset"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/sessions/revoke-all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Revoke all user sessions */
    post: operations["revokeAllSessions"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/webauthn/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start WebAuthn registration */
    post: operations["startWebAuthnRegistration"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/webauthn/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify WebAuthn registration */
    post: operations["verifyWebAuthnRegistration"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/webauthn/login/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Start WebAuthn login */
    post: operations["startWebAuthnLogin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/webauthn/login/finish": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Complete WebAuthn login */
    post: operations["finishWebAuthnLogin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/oidc/{provider}/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Start OIDC login */
    get: operations["startOIDCLogin"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/oidc/{provider}/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** OIDC callback handler */
    get: operations["handleOIDCCallback"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List messages with complete folder coverage */
    get: operations["listMessages"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/counts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get unread counts per folder and label */
    get: operations["getMailCounts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/messages/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get message by ID */
    get: operations["getMessage"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/send": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send email */
    post: operations["sendMessage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/drafts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List drafts */
    get: operations["listDrafts"];
    put?: never;
    /** Create draft */
    post: operations["createDraft"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/drafts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get draft by ID */
    get: operations["getDraft"];
    put?: never;
    post?: never;
    /** Delete draft */
    delete: operations["deleteDraft"];
    options?: never;
    head?: never;
    /** Update draft */
    patch: operations["updateDraft"];
    trace?: never;
  };
  "/mail/scheduled": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List scheduled messages */
    get: operations["listScheduled"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/scheduled/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update scheduled message send time */
    patch: operations["updateScheduled"];
    trace?: never;
  };
  "/mail/scheduled/{id}/send-now": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send scheduled message immediately */
    post: operations["sendScheduledNow"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/scheduled/{id}/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cancel scheduled message */
    post: operations["cancelScheduled"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/outbox": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List outbox messages */
    get: operations["listOutbox"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/outbox/{id}/retry": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Retry failed outbox message */
    post: operations["retryOutbox"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/outbox/{id}/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cancel outbox message */
    post: operations["cancelOutbox"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/attachments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload attachment */
    post: operations["uploadAttachment"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/mark": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Mark messages */
    post: operations["markMessages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Move messages */
    post: operations["moveMessages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/snooze": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Snooze messages */
    post: operations["snoozeMessages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/labels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List user labels */
    get: operations["listLabels"];
    put?: never;
    /** Create new label */
    post: operations["createLabel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/labels/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get label by ID */
    get: operations["getLabel"];
    put?: never;
    post?: never;
    /** Delete label */
    delete: operations["deleteLabel"];
    options?: never;
    head?: never;
    /** Update label */
    patch: operations["updateLabel"];
    trace?: never;
  };
  "/mail/quarantine": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List quarantined messages for user */
    get: operations["listQuarantine"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mail/quarantine/{id}/request-release": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request release of quarantined message */
    post: operations["requestQuarantineRelease"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/policy/trusted-senders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get trusted senders */
    get: operations["getTrustedSenders"];
    put?: never;
    /** Add trusted sender */
    post: operations["addTrustedSender"];
    /** Remove trusted sender */
    delete: operations["removeTrustedSender"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user settings bundle */
    get: operations["getSettings"];
    /** Update user settings bundle */
    put: operations["updateSettings"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/settings/signatures": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List email signatures */
    get: operations["listSignatures"];
    put?: never;
    /** Create email signature */
    post: operations["createSignature"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/settings/signatures/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get signature by ID */
    get: operations["getSignature"];
    put?: never;
    post?: never;
    /** Delete signature */
    delete: operations["deleteSignature"];
    options?: never;
    head?: never;
    /** Update signature */
    patch: operations["updateSignature"];
    trace?: never;
  };
  "/settings/templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List email templates */
    get: operations["listTemplates"];
    put?: never;
    /** Create email template */
    post: operations["createTemplate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/settings/templates/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get template by ID */
    get: operations["getTemplate"];
    put?: never;
    post?: never;
    /** Delete template */
    delete: operations["deleteTemplate"];
    options?: never;
    head?: never;
    /** Update template */
    patch: operations["updateTemplate"];
    trace?: never;
  };
  "/settings/ooo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get out-of-office settings */
    get: operations["getOutOfOffice"];
    /** Update out-of-office settings */
    put: operations["updateOutOfOffice"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/security/sessions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List active user sessions */
    get: operations["listSessions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/security/sessions/revoke-all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Revoke all user sessions except current */
    post: operations["revokeAllSessions"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/calendar/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List calendar events */
    get: operations["listCalendarEvents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chat/conversations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List chat conversations */
    get: operations["listChatConversations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/audit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List audit events */
    get: operations["listAuditEvents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/audit/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get audit event details */
    get: operations["getAuditEvent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/audit/export.csv": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Export audit events to CSV */
    get: operations["exportAuditEvents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /** Format: uuid */
      id: string;
      /** Format: email */
      email: string;
      name: string;
      emailVerified: boolean;
      mfaEnabled: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Session: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      deviceInfo: string;
      ipAddress: string;
      userAgent?: string;
      location?: string;
      /** @default false */
      isCurrent: boolean;
      /** Format: date-time */
      lastActivity: string;
      /** Format: date-time */
      expiresAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    Message: {
      /** Format: uuid */
      id: string;
      messageId: string;
      /** Format: uuid */
      threadId?: string;
      /** Format: email */
      from: string;
      to?: string[];
      cc?: string[];
      bcc?: string[];
      subject: string;
      body: string;
      htmlBody?: string;
      attachments?: components["schemas"]["Attachment"][];
      labels?: components["schemas"]["Label"][];
      flags?: (
        | "seen"
        | "answered"
        | "flagged"
        | "deleted"
        | "draft"
        | "recent"
      )[];
      folder: string;
      /** @enum {string} */
      priority?: "low" | "normal" | "high";
      /** Format: date-time */
      sentAt?: string;
      /** Format: date-time */
      receivedAt?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Attachment: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      messageId?: string;
      filename: string;
      contentType: string;
      size: number;
      contentId?: string;
      /** @enum {string} */
      disposition: "attachment" | "inline";
      /** Format: uri */
      url: string;
      /** Format: date-time */
      createdAt: string;
    };
    Label: {
      /** Format: uuid */
      id: string;
      name: string;
      color: string;
      description?: string;
      /** Format: uuid */
      userId: string;
      /** @default false */
      isSystem: boolean;
      /** @default 0 */
      messageCount: number;
      /** @default 0 */
      unreadCount: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Policy: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      /** @enum {string} */
      type: "trusted_sender" | "block_sender" | "spam_filter";
      value: string;
      /** @enum {string} */
      action: "allow" | "block" | "mark_as_spam";
      /** Format: date-time */
      createdAt: string;
    };
    Audit: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId?: string;
      action: string;
      resource: string;
      resourceId?: string;
      ipAddress: string;
      userAgent?: string;
      metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
    };
    HealthResponse: {
      /** @example ok */
      status: string;
      /** Format: date-time */
      timestamp: string;
      /** @example 1.0.0 */
      version: string;
    };
    ReadinessResponse: {
      /** @example ready */
      status: string;
      checks: {
        /** @enum {string} */
        database?: "healthy" | "unhealthy";
        /** @enum {string} */
        redis?: "healthy" | "unhealthy";
      };
      /** Format: date-time */
      timestamp: string;
    };
    LoginRequest: {
      /** Format: email */
      email: string;
      password: string;
      mfaCode?: string;
      /** @default false */
      rememberMe: boolean;
    };
    LoginResponse: {
      accessToken: string;
      expiresIn: number;
      user: components["schemas"]["User"];
      requiresMFA?: boolean;
      mfaToken?: string;
    };
    RefreshResponse: {
      accessToken: string;
      expiresIn: number;
    };
    MFAVerifyRequest: {
      mfaToken: string;
      code: string;
    };
    PasswordResetRequest: {
      /** Format: email */
      email: string;
    };
    PasswordResetConfirm: {
      token: string;
      newPassword: string;
    };
    WebAuthnChallenge: {
      challenge: string;
      timeout?: number;
      rpId?: string;
      allowCredentials?: Record<string, never>[];
    };
    WebAuthnVerifyRequest: {
      challenge: string;
      response: Record<string, never>;
    };
    WebAuthnLoginStart: {
      /** Format: email */
      email: string;
    };
    WebAuthnLoginFinish: {
      challenge: string;
      response: Record<string, never>;
    };
    SendMessageRequest: {
      to: string[];
      cc?: string[];
      bcc?: string[];
      subject: string;
      body: string;
      htmlBody?: string;
      attachments?: string[];
      /**
       * @default normal
       * @enum {string}
       */
      priority: "low" | "normal" | "high";
    };
    DraftRequest: {
      to?: string[];
      cc?: string[];
      bcc?: string[];
      subject?: string;
      body?: string;
      htmlBody?: string;
      attachments?: string[];
    };
    MarkMessagesRequest: {
      messageIds: string[];
      /** @enum {string} */
      action: "read" | "unread" | "flag" | "unflag" | "archive";
    };
    MoveMessagesRequest: {
      messageIds: string[];
      folder: string;
    };
    SnoozeMessagesRequest: {
      messageIds: string[];
      /** Format: date-time */
      snoozeUntil: string;
    };
    MailCountsResponse: {
      folders: {
        /** @default 0 */
        inbox: number;
        /** @default 0 */
        sent: number;
        /** @default 0 */
        drafts: number;
        /** @default 0 */
        trash: number;
        /** @default 0 */
        spam: number;
        /** @default 0 */
        archive: number;
        /** @default 0 */
        scheduled: number;
        /** @default 0 */
        outbox: number;
      };
      /** @description Unread counts by label ID */
      labels: {
        [key: string]: number;
      };
      /** @description Total unread messages across all folders */
      total: number;
    };
    MessagesResponse: {
      messages: components["schemas"]["Message"][];
      pagination: components["schemas"]["Pagination"];
    };
    Pagination: {
      total: number;
      limit: number;
      offset: number;
      hasMore: boolean;
    };
    TrustedSenderRequest:
      | {
          /** Format: email */
          email?: string;
          domain?: string;
        }
      | unknown
      | unknown;
    RemoveTrustedSenderRequest:
      | {
          /** Format: email */
          email?: string;
          domain?: string;
        }
      | unknown
      | unknown;
    TrustedSendersResponse: {
      policies: components["schemas"]["Policy"][];
    };
    UserSettings: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      /**
       * @default system
       * @enum {string}
       */
      theme: "light" | "dark" | "system";
      /** @default en */
      language: string;
      /** @default UTC */
      timezone: string;
      emailSignature?: string;
      autoReply?: {
        enabled?: boolean;
        message?: string;
        /** Format: date-time */
        startDate?: string;
        /** Format: date-time */
        endDate?: string;
      };
      notifications?: {
        email?: boolean;
        push?: boolean;
        desktop?: boolean;
      };
      privacy?: {
        readReceipts?: boolean;
        trackingImages?: boolean;
      };
      /** Format: date-time */
      updatedAt: string;
    };
    UpdateSettingsRequest: {
      /** @enum {string} */
      theme?: "light" | "dark" | "system";
      language?: string;
      timezone?: string;
      emailSignature?: string;
      autoReply?: {
        enabled?: boolean;
        message?: string;
        /** Format: date-time */
        startDate?: string;
        /** Format: date-time */
        endDate?: string;
      };
      notifications?: {
        email?: boolean;
        push?: boolean;
        desktop?: boolean;
      };
      privacy?: {
        readReceipts?: boolean;
        trackingImages?: boolean;
      };
    };
    UpdateScheduledRequest: {
      /** Format: date-time */
      sendAt: string;
    };
    LabelsResponse: {
      labels: components["schemas"]["Label"][];
    };
    CreateLabelRequest: {
      name: string;
      color: string;
      description?: string;
    };
    UpdateLabelRequest: {
      name?: string;
      color?: string;
      description?: string;
    };
    QuarantineReleaseRequest: {
      reason?: string;
    };
    Signature: {
      /** Format: uuid */
      id: string;
      name: string;
      content: string;
      isDefault: boolean;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    SignaturesResponse: {
      signatures: components["schemas"]["Signature"][];
    };
    CreateSignatureRequest: {
      name: string;
      content: string;
      isDefault?: boolean;
      /** @default true */
      isActive: boolean;
    };
    UpdateSignatureRequest: {
      name?: string;
      content?: string;
      isDefault?: boolean;
      isActive?: boolean;
    };
    Template: {
      /** Format: uuid */
      id: string;
      name: string;
      subject: string;
      content: string;
      isActive: boolean;
      /** @enum {string} */
      category: "personal" | "business" | "support" | "marketing";
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TemplatesResponse: {
      templates: components["schemas"]["Template"][];
    };
    CreateTemplateRequest: {
      name: string;
      subject: string;
      content: string;
      /** @default true */
      isActive: boolean;
      /**
       * @default personal
       * @enum {string}
       */
      category: "personal" | "business" | "support" | "marketing";
    };
    UpdateTemplateRequest: {
      name?: string;
      subject?: string;
      content?: string;
      isActive?: boolean;
      /** @enum {string} */
      category?: "personal" | "business" | "support" | "marketing";
    };
    OutOfOfficeSettings: {
      enabled: boolean;
      subject?: string;
      message?: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      sendToContacts?: boolean;
      sendToExternal?: boolean;
      contactsOnlyMessage?: string;
      externalMessage?: string;
      /** Format: date-time */
      updatedAt: string;
    };
    UpdateOutOfOfficeRequest: {
      enabled: boolean;
      subject?: string;
      message?: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      sendToContacts?: boolean;
      sendToExternal?: boolean;
      contactsOnlyMessage?: string;
      externalMessage?: string;
    };
    SessionsResponse: {
      sessions: components["schemas"]["Session"][];
    };
    CalendarEventsResponse: {
      events: {
        /** Format: uuid */
        id?: string;
        title?: string;
        /** Format: date-time */
        start?: string;
        /** Format: date-time */
        end?: string;
      }[];
    };
    ChatConversationsResponse: {
      conversations: {
        /** Format: uuid */
        id?: string;
        name?: string;
        lastMessage?: string;
        /** Format: date-time */
        updatedAt?: string;
      }[];
    };
    MessageResponse: {
      message: string;
      /** @default true */
      success: boolean;
    };
    ErrorResponse: {
      error: string;
      message: string;
      code?: string;
      details?: Record<string, never>;
    };
    AuditEvent: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      ts: string;
      /** Format: uuid */
      actorId?: string | null;
      /** Format: email */
      actorEmail?: string | null;
      action: string;
      resourceType: string;
      resourceId?: string | null;
      /** @enum {string} */
      result: "SUCCESS" | "FAILURE";
      ip?: string | null;
      userAgent?: string | null;
      metadata?: Record<string, never> | null;
      actor?: {
        /** Format: uuid */
        id?: string;
        /** Format: email */
        email?: string;
        name?: string;
      } | null;
    };
    AuditListResponse: {
      items: components["schemas"]["AuditEvent"][];
      nextCursor?: string | null;
      totalApprox: number;
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Forbidden */
    Forbidden: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Not found */
    NotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Rate limit exceeded */
    RateLimit: {
      headers: {
        /** @description Request limit per window */
        "X-RateLimit-Limit"?: number;
        /** @description Requests remaining in window */
        "X-RateLimit-Remaining"?: number;
        /** @description Window reset time (Unix timestamp) */
        "X-RateLimit-Reset"?: number;
        /** @description Seconds until retry allowed */
        "Retry-After"?: number;
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  healthCheck: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Service is healthy */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HealthResponse"];
        };
      };
    };
  };
  readinessCheck: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Service is ready */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReadinessResponse"];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        headers: {
          /** @description Refresh token cookie */
          "Set-Cookie"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      429: components["responses"]["RateLimit"];
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Logout successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token refreshed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RefreshResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  verifyMFA: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MFAVerifyRequest"];
      };
    };
    responses: {
      /** @description MFA verified */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  requestPasswordReset: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetRequest"];
      };
    };
    responses: {
      /** @description Reset email sent */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  confirmPasswordReset: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
      };
    };
    responses: {
      /** @description Password reset successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  // revokeAllSessions: {
  //     parameters: {
  //         query?: never;
  //         header?: never;
  //         path?: never;
  //         cookie?: never;
  //     };
  //     requestBody?: never;
  //     responses: {
  //         /** @description All sessions revoked */
  //         200: {
  //             headers: {
  //                 [name: string]: unknown;
  //             };
  //             content: {
  //                 "application/json": components["schemas"]["MessageResponse"];
  //             };
  //         };
  //     };
  // };
  startWebAuthnRegistration: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Registration challenge */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebAuthnChallenge"];
        };
      };
    };
  };
  verifyWebAuthnRegistration: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebAuthnVerifyRequest"];
      };
    };
    responses: {
      /** @description Registration successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  startWebAuthnLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebAuthnLoginStart"];
      };
    };
    responses: {
      /** @description Login challenge */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebAuthnChallenge"];
        };
      };
    };
  };
  finishWebAuthnLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebAuthnLoginFinish"];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
    };
  };
  startOIDCLogin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        provider: "google" | "entra";
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect to provider */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["BadRequest"];
    };
  };
  handleOIDCCallback: {
    parameters: {
      query: {
        code: string;
        state: string;
      };
      header?: never;
      path: {
        provider: "google" | "entra";
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect to application */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["BadRequest"];
    };
  };
  listMessages: {
    parameters: {
      query?: {
        /** @description System folder (inbox, sent, drafts, trash, spam, archive) */
        folder?:
          | "inbox"
          | "sent"
          | "drafts"
          | "trash"
          | "spam"
          | "archive"
          | "scheduled"
          | "outbox";
        /** @description Message view filter */
        view?: "all" | "unread" | "starred" | "important";
        /** @description Filter by label ID */
        labelId?: string;
        /** @description Message category filter */
        category?: "primary" | "social" | "promotions" | "updates" | "forums";
        /** @description Page number (1-based) */
        page?: number;
        /** @description Number of messages per page */
        pageSize?: number;
        /** @description Search query (supports full-text search) */
        q?: string;
        /** @description Maximum number of results (deprecated, use pageSize) */
        limit?: number;
        /** @description Number of results to skip (deprecated, use page) */
        offset?: number;
        /** @description Search query (deprecated, use q) */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Messages list with pagination */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
    };
  };
  getMailCounts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Mail counts by folder and label */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MailCountsResponse"];
        };
      };
    };
  };
  getMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Message details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  sendMessage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendMessageRequest"];
      };
    };
    responses: {
      /** @description Message sent */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
    };
  };
  listDrafts: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Drafts list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
    };
  };
  createDraft: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftRequest"];
      };
    };
    responses: {
      /** @description Draft created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
    };
  };
  getDraft: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Draft details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  deleteDraft: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Draft deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  updateDraft: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftRequest"];
      };
    };
    responses: {
      /** @description Draft updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  listScheduled: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Scheduled messages list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
    };
  };
  updateScheduled: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateScheduledRequest"];
      };
    };
    responses: {
      /** @description Scheduled message updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  sendScheduledNow: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Message sent immediately */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  cancelScheduled: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Scheduled message cancelled (moved to drafts) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  listOutbox: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Outbox messages list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
    };
  };
  retryOutbox: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Message retry initiated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  cancelOutbox: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Outbox message cancelled (moved to drafts) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  uploadAttachment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Attachment uploaded */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Attachment"];
        };
      };
    };
  };
  markMessages: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MarkMessagesRequest"];
      };
    };
    responses: {
      /** @description Messages marked */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  moveMessages: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MoveMessagesRequest"];
      };
    };
    responses: {
      /** @description Messages moved */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  snoozeMessages: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SnoozeMessagesRequest"];
      };
    };
    responses: {
      /** @description Messages snoozed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  listLabels: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Labels list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LabelsResponse"];
        };
      };
    };
  };
  createLabel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateLabelRequest"];
      };
    };
    responses: {
      /** @description Label created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Label"];
        };
      };
    };
  };
  getLabel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Label details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Label"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  deleteLabel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Label deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  updateLabel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateLabelRequest"];
      };
    };
    responses: {
      /** @description Label updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Label"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  listQuarantine: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Quarantined messages list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
    };
  };
  requestQuarantineRelease: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["QuarantineReleaseRequest"];
      };
    };
    responses: {
      /** @description Release request submitted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  getTrustedSenders: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Trusted senders list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustedSendersResponse"];
        };
      };
    };
  };
  addTrustedSender: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustedSenderRequest"];
      };
    };
    responses: {
      /** @description Trusted sender added */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Policy"];
        };
      };
    };
  };
  removeTrustedSender: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveTrustedSenderRequest"];
      };
    };
    responses: {
      /** @description Trusted sender removed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  getSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User settings bundle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserSettings"];
        };
      };
    };
  };
  updateSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSettingsRequest"];
      };
    };
    responses: {
      /** @description Settings updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserSettings"];
        };
      };
    };
  };
  listSignatures: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Email signatures list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SignaturesResponse"];
        };
      };
    };
  };
  createSignature: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSignatureRequest"];
      };
    };
    responses: {
      /** @description Signature created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Signature"];
        };
      };
    };
  };
  getSignature: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Signature details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Signature"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  deleteSignature: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Signature deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  updateSignature: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSignatureRequest"];
      };
    };
    responses: {
      /** @description Signature updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Signature"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  listTemplates: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Email templates list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TemplatesResponse"];
        };
      };
    };
  };
  createTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTemplateRequest"];
      };
    };
    responses: {
      /** @description Template created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Template"];
        };
      };
    };
  };
  getTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Template details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Template"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  deleteTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Template deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  updateTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTemplateRequest"];
      };
    };
    responses: {
      /** @description Template updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Template"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  getOutOfOffice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Out-of-office settings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OutOfOfficeSettings"];
        };
      };
    };
  };
  updateOutOfOffice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOutOfOfficeRequest"];
      };
    };
    responses: {
      /** @description Out-of-office settings updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OutOfOfficeSettings"];
        };
      };
    };
  };
  listSessions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Active sessions list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SessionsResponse"];
        };
      };
    };
  };
  revokeAllSessions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description All sessions revoked */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  listCalendarEvents: {
    parameters: {
      query?: {
        start?: string;
        end?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Calendar events */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CalendarEventsResponse"];
        };
      };
    };
  };
  listChatConversations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Chat conversations */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChatConversationsResponse"];
        };
      };
    };
  };
  listAuditEvents: {
    parameters: {
      query?: {
        /** @description Search query for filtering events */
        q?: string;
        /** @description Start date filter (ISO 8601) */
        from?: string;
        /** @description End date filter (ISO 8601) */
        to?: string;
        /** @description Filter by actor email */
        actor?: string;
        /** @description Filter by action type */
        action?: string;
        /** @description Filter by resource type */
        resourceType?: string;
        /** @description Filter by resource ID */
        resourceId?: string;
        /** @description Filter by result type */
        result?: "SUCCESS" | "FAILURE";
        /** @description Filter by IP address */
        ip?: string;
        /** @description Page number */
        page?: number;
        /** @description Number of items per page */
        limit?: number;
        /** @description Cursor for pagination */
        cursor?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of audit events */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuditListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  getAuditEvent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Audit event ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Audit event details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuditEvent"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  exportAuditEvents: {
    parameters: {
      query?: {
        /** @description Search query for filtering events */
        q?: string;
        /** @description Start date filter (ISO 8601) */
        from?: string;
        /** @description End date filter (ISO 8601) */
        to?: string;
        /** @description Filter by actor email */
        actor?: string;
        /** @description Filter by action type */
        action?: string;
        /** @description Filter by resource type */
        resourceType?: string;
        /** @description Filter by resource ID */
        resourceId?: string;
        /** @description Filter by result type */
        result?: "SUCCESS" | "FAILURE";
        /** @description Filter by IP address */
        ip?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description CSV file with audit events */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/csv": string;
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
}
