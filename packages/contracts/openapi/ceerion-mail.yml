openapi: 3.1.0
info:
  title: CEERION Mail API
  version: 1.0.0
  description: Backend API for CEERION Mail application with comprehensive authentication and mail handling
  contact:
    name: CEERION Team
  license:
    name: MIT
servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.mail.ceerion.com
    description: Production server
security:
  - bearerJWT: []
paths:
  /healthz:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      security: []
      tags:
        - Health
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /readyz:
    get:
      summary: Readiness check endpoint
      operationId: readinessCheck
      security: []
      tags:
        - Health
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessResponse"
  /auth/login:
    post:
      summary: User login with email/password
      operationId: login
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/RateLimit"
  /auth/logout:
    post:
      summary: Logout user and invalidate tokens
      operationId: logout
      tags:
        - Authentication
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshToken
      security:
        - cookieRefresh: []
      tags:
        - Authentication
      responses:
        "200":
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /auth/mfa/verify:
    post:
      summary: Verify MFA token
      operationId: verifyMFA
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MFAVerifyRequest"
      responses:
        "200":
          description: MFA verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /auth/password/reset/request:
    post:
      summary: Request password reset
      operationId: requestPasswordReset
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: Reset email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/password/reset/confirm:
    post:
      summary: Confirm password reset
      operationId: confirmPasswordReset
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/sessions/revoke-all:
    post:
      summary: Revoke all user sessions
      operationId: revokeAllSessions
      tags:
        - Authentication
      responses:
        "200":
          description: All sessions revoked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/webauthn/register:
    post:
      summary: Start WebAuthn registration
      operationId: startWebAuthnRegistration
      tags:
        - Authentication
      responses:
        "200":
          description: Registration challenge
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebAuthnChallenge"
  /auth/webauthn/verify:
    post:
      summary: Verify WebAuthn registration
      operationId: verifyWebAuthnRegistration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnVerifyRequest"
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/webauthn/login/start:
    post:
      summary: Start WebAuthn login
      operationId: startWebAuthnLogin
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnLoginStart"
      responses:
        "200":
          description: Login challenge
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebAuthnChallenge"
  /auth/webauthn/login/finish:
    post:
      summary: Complete WebAuthn login
      operationId: finishWebAuthnLogin
      security: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnLoginFinish"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /auth/oidc/{provider}/login:
    get:
      summary: Start OIDC login
      operationId: startOIDCLogin
      security: []
      tags:
        - Authentication
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum:
              - google
              - entra
      responses:
        "302":
          description: Redirect to provider
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/oidc/{provider}/callback:
    get:
      summary: OIDC callback handler
      operationId: handleOIDCCallback
      security: []
      tags:
        - Authentication
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum:
              - google
              - entra
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        "302":
          description: Redirect to application
        "400":
          $ref: "#/components/responses/BadRequest"
  /mail/messages:
    get:
      summary: List messages with complete folder coverage
      operationId: listMessages
      tags:
        - Mail
      parameters:
        - name: folder
          in: query
          description: System folder (inbox, sent, drafts, trash, spam, archive)
          schema:
            type: string
            enum:
              - inbox
              - sent
              - drafts
              - trash
              - spam
              - archive
              - scheduled
              - outbox
            default: inbox
        - name: view
          in: query
          description: Message view filter
          schema:
            type: string
            enum:
              - all
              - unread
              - starred
              - important
            default: all
        - name: labelId
          in: query
          description: Filter by label ID
          schema:
            type: string
            format: uuid
        - name: category
          in: query
          description: Message category filter
          schema:
            type: string
            enum:
              - primary
              - social
              - promotions
              - updates
              - forums
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of messages per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: q
          in: query
          description: Search query (supports full-text search)
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results (deprecated, use pageSize)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of results to skip (deprecated, use page)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: search
          in: query
          description: Search query (deprecated, use q)
          schema:
            type: string
      responses:
        "200":
          description: Messages list with pagination
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagesResponse"
  /mail/counts:
    get:
      summary: Get unread counts per folder and label
      operationId: getMailCounts
      tags:
        - Mail
      responses:
        "200":
          description: Mail counts by folder and label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MailCountsResponse"
  /mail/messages/{id}:
    get:
      summary: Get message by ID
      operationId: getMessage
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/send:
    post:
      summary: Send email
      operationId: sendMessage
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMessageRequest"
      responses:
        "200":
          description: Message sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /mail/drafts:
    get:
      summary: List drafts
      operationId: listDrafts
      tags:
        - Mail
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        "200":
          description: Drafts list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagesResponse"
    post:
      summary: Create draft
      operationId: createDraft
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DraftRequest"
      responses:
        "201":
          description: Draft created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /mail/drafts/{id}:
    get:
      summary: Get draft by ID
      operationId: getDraft
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Draft details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update draft
      operationId: updateDraft
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DraftRequest"
      responses:
        "200":
          description: Draft updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete draft
      operationId: deleteDraft
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Draft deleted
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/scheduled:
    get:
      summary: List scheduled messages
      operationId: listScheduled
      tags:
        - Mail
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        "200":
          description: Scheduled messages list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagesResponse"
  /mail/scheduled/{id}:
    patch:
      summary: Update scheduled message send time
      operationId: updateScheduled
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScheduledRequest"
      responses:
        "200":
          description: Scheduled message updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/scheduled/{id}/send-now:
    post:
      summary: Send scheduled message immediately
      operationId: sendScheduledNow
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message sent immediately
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/scheduled/{id}/cancel:
    post:
      summary: Cancel scheduled message
      operationId: cancelScheduled
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Scheduled message cancelled (moved to drafts)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/outbox:
    get:
      summary: List outbox messages
      operationId: listOutbox
      tags:
        - Mail
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        "200":
          description: Outbox messages list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagesResponse"
  /mail/outbox/{id}/retry:
    post:
      summary: Retry failed outbox message
      operationId: retryOutbox
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message retry initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/outbox/{id}/cancel:
    post:
      summary: Cancel outbox message
      operationId: cancelOutbox
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Outbox message cancelled (moved to drafts)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/attachments:
    post:
      summary: Upload attachment
      operationId: uploadAttachment
      tags:
        - Mail
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Attachment uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
  /mail/mark:
    post:
      summary: Mark messages
      operationId: markMessages
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkMessagesRequest"
      responses:
        "200":
          description: Messages marked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /mail/move:
    post:
      summary: Move messages
      operationId: moveMessages
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveMessagesRequest"
      responses:
        "200":
          description: Messages moved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /mail/snooze:
    post:
      summary: Snooze messages
      operationId: snoozeMessages
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnoozeMessagesRequest"
      responses:
        "200":
          description: Messages snoozed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /mail/labels:
    get:
      summary: List user labels
      operationId: listLabels
      tags:
        - Mail
      responses:
        "200":
          description: Labels list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
    post:
      summary: Create new label
      operationId: createLabel
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLabelRequest"
      responses:
        "201":
          description: Label created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
  /mail/labels/{id}:
    get:
      summary: Get label by ID
      operationId: getLabel
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Label details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update label
      operationId: updateLabel
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLabelRequest"
      responses:
        "200":
          description: Label updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete label
      operationId: deleteLabel
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Label deleted
        "404":
          $ref: "#/components/responses/NotFound"
  /mail/quarantine:
    get:
      summary: List quarantined messages for user
      operationId: listQuarantine
      tags:
        - Mail
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        "200":
          description: Quarantined messages list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagesResponse"
  /mail/quarantine/{id}/request-release:
    post:
      summary: Request release of quarantined message
      operationId: requestQuarantineRelease
      tags:
        - Mail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuarantineReleaseRequest"
      responses:
        "200":
          description: Release request submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          $ref: "#/components/responses/NotFound"
  /policy/trusted-senders:
    get:
      summary: Get trusted senders
      operationId: getTrustedSenders
      tags:
        - Policy
      responses:
        "200":
          description: Trusted senders list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrustedSendersResponse"
    post:
      summary: Add trusted sender
      operationId: addTrustedSender
      tags:
        - Policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrustedSenderRequest"
      responses:
        "201":
          description: Trusted sender added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
    delete:
      summary: Remove trusted sender
      operationId: removeTrustedSender
      tags:
        - Policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveTrustedSenderRequest"
      responses:
        "200":
          description: Trusted sender removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /settings:
    get:
      summary: Get user settings bundle
      operationId: getSettings
      tags:
        - Settings
      responses:
        "200":
          description: User settings bundle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
    put:
      summary: Update user settings bundle
      operationId: updateSettings
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSettingsRequest"
      responses:
        "200":
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
  /settings/signatures:
    get:
      summary: List email signatures
      operationId: listSignatures
      tags:
        - Settings
      responses:
        "200":
          description: Email signatures list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignaturesResponse"
    post:
      summary: Create email signature
      operationId: createSignature
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSignatureRequest"
      responses:
        "201":
          description: Signature created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"
  /settings/signatures/{id}:
    get:
      summary: Get signature by ID
      operationId: getSignature
      tags:
        - Settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Signature details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update signature
      operationId: updateSignature
      tags:
        - Settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSignatureRequest"
      responses:
        "200":
          description: Signature updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete signature
      operationId: deleteSignature
      tags:
        - Settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Signature deleted
        "404":
          $ref: "#/components/responses/NotFound"
  /settings/templates:
    get:
      summary: List email templates
      operationId: listTemplates
      tags:
        - Settings
      responses:
        "200":
          description: Email templates list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplatesResponse"
    post:
      summary: Create email template
      operationId: createTemplate
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTemplateRequest"
      responses:
        "201":
          description: Template created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
  /settings/templates/{id}:
    get:
      summary: Get template by ID
      operationId: getTemplate
      tags:
        - Settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Template details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update template
      operationId: updateTemplate
      tags:
        - Settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTemplateRequest"
      responses:
        "200":
          description: Template updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete template
      operationId: deleteTemplate
      tags:
        - Settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Template deleted
        "404":
          $ref: "#/components/responses/NotFound"
  /settings/ooo:
    get:
      summary: Get out-of-office settings
      operationId: getOutOfOffice
      tags:
        - Settings
      responses:
        "200":
          description: Out-of-office settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfOfficeSettings"
    put:
      summary: Update out-of-office settings
      operationId: updateOutOfOffice
      tags:
        - Settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOutOfOfficeRequest"
      responses:
        "200":
          description: Out-of-office settings updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutOfOfficeSettings"
  /security/sessions:
    get:
      summary: List active user sessions
      operationId: listSessions
      tags:
        - Security
      responses:
        "200":
          description: Active sessions list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionsResponse"
  /security/sessions/revoke-all:
    post:
      summary: Revoke all user sessions except current
      operationId: revokeAllSessions
      tags:
        - Security
      responses:
        "200":
          description: All sessions revoked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /calendar/events:
    get:
      summary: List calendar events
      operationId: listCalendarEvents
      tags:
        - Calendar
      parameters:
        - name: start
          in: query
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Calendar events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalendarEventsResponse"
  /chat/conversations:
    get:
      summary: List chat conversations
      operationId: listChatConversations
      tags:
        - Chat
      responses:
        "200":
          description: Chat conversations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatConversationsResponse"
  /admin/audit:
    get:
      summary: List audit events
      operationId: listAuditEvents
      tags:
        - Admin
        - Audit
      security:
        - bearerJWT: []
      parameters:
        - name: q
          in: query
          description: Search query for filtering events
          schema:
            type: string
        - name: from
          in: query
          description: Start date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: actor
          in: query
          description: Filter by actor email
          schema:
            type: string
        - name: action
          in: query
          description: Filter by action type
          schema:
            type: string
        - name: resourceType
          in: query
          description: Filter by resource type
          schema:
            type: string
        - name: resourceId
          in: query
          description: Filter by resource ID
          schema:
            type: string
        - name: result
          in: query
          description: Filter by result type
          schema:
            type: string
            enum: [SUCCESS, FAILURE]
        - name: ip
          in: query
          description: Filter by IP address
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
      responses:
        "200":
          description: List of audit events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /admin/audit/{id}:
    get:
      summary: Get audit event details
      operationId: getAuditEvent
      tags:
        - Admin
        - Audit
      security:
        - bearerJWT: []
      parameters:
        - name: id
          in: path
          required: true
          description: Audit event ID
          schema:
            type: string
      responses:
        "200":
          description: Audit event details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditEvent"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/audit/export.csv:
    get:
      summary: Export audit events to CSV
      operationId: exportAuditEvents
      tags:
        - Admin
        - Audit
      security:
        - bearerJWT: []
      parameters:
        - name: q
          in: query
          description: Search query for filtering events
          schema:
            type: string
        - name: from
          in: query
          description: Start date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: actor
          in: query
          description: Filter by actor email
          schema:
            type: string
        - name: action
          in: query
          description: Filter by action type
          schema:
            type: string
        - name: resourceType
          in: query
          description: Filter by resource type
          schema:
            type: string
        - name: resourceId
          in: query
          description: Filter by resource ID
          schema:
            type: string
        - name: result
          in: query
          description: Filter by result type
          schema:
            type: string
            enum: [SUCCESS, FAILURE]
        - name: ip
          in: query
          description: Filter by IP address
          schema:
            type: string
      responses:
        "200":
          description: CSV file with audit events
          content:
            text/csv:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
components:
  securitySchemes:
    bearerJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: RS256 JWT access token
    cookieRefresh:
      type: apiKey
      in: cookie
      name: refresh_token
      description: Refresh token in HTTP-only cookie
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        emailVerified:
          type: boolean
        mfaEnabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - name
        - emailVerified
        - mfaEnabled
        - createdAt
        - updatedAt
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        deviceInfo:
          type: string
        ipAddress:
          type: string
        userAgent:
          type: string
        location:
          type: string
        isCurrent:
          type: boolean
          default: false
        lastActivity:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - deviceInfo
        - ipAddress
        - isCurrent
        - lastActivity
        - expiresAt
        - createdAt
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        messageId:
          type: string
        threadId:
          type: string
          format: uuid
        from:
          type: string
          format: email
        to:
          type: array
          items:
            type: string
            format: email
        cc:
          type: array
          items:
            type: string
            format: email
        bcc:
          type: array
          items:
            type: string
            format: email
        subject:
          type: string
        body:
          type: string
        htmlBody:
          type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        flags:
          type: array
          items:
            type: string
            enum:
              - seen
              - answered
              - flagged
              - deleted
              - draft
              - recent
        folder:
          type: string
        priority:
          type: string
          enum:
            - low
            - normal
            - high
        sentAt:
          type: string
          format: date-time
        receivedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - messageId
        - from
        - subject
        - body
        - folder
        - createdAt
        - updatedAt
    Attachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        messageId:
          type: string
          format: uuid
        filename:
          type: string
        contentType:
          type: string
        size:
          type: integer
        contentId:
          type: string
        disposition:
          type: string
          enum:
            - attachment
            - inline
        url:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - filename
        - contentType
        - size
        - disposition
        - url
        - createdAt
    Label:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
          pattern: ^#[0-9A-F]{6}$
        description:
          type: string
        userId:
          type: string
          format: uuid
        isSystem:
          type: boolean
          default: false
        messageCount:
          type: integer
          default: 0
        unreadCount:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - color
        - userId
        - isSystem
        - messageCount
        - unreadCount
        - createdAt
    Policy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - trusted_sender
            - block_sender
            - spam_filter
        value:
          type: string
        action:
          type: string
          enum:
            - allow
            - block
            - mark_as_spam
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - value
        - action
        - createdAt
    Audit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        action:
          type: string
        resource:
          type: string
        resourceId:
          type: string
        ipAddress:
          type: string
        userAgent:
          type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - action
        - resource
        - ipAddress
        - createdAt
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: 1.0.0
      required:
        - status
        - timestamp
        - version
    ReadinessResponse:
      type: object
      properties:
        status:
          type: string
          example: ready
        checks:
          type: object
          properties:
            database:
              type: string
              enum:
                - healthy
                - unhealthy
            redis:
              type: string
              enum:
                - healthy
                - unhealthy
        timestamp:
          type: string
          format: date-time
      required:
        - status
        - checks
        - timestamp
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        mfaCode:
          type: string
          pattern: ^[0-9]{6}$
        rememberMe:
          type: boolean
          default: false
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        requiresMFA:
          type: boolean
        mfaToken:
          type: string
      required:
        - accessToken
        - expiresIn
        - user
    RefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
      required:
        - accessToken
        - expiresIn
    MFAVerifyRequest:
      type: object
      properties:
        mfaToken:
          type: string
        code:
          type: string
          pattern: ^[0-9]{6}$
      required:
        - mfaToken
        - code
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetConfirm:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 8
      required:
        - token
        - newPassword
    WebAuthnChallenge:
      type: object
      properties:
        challenge:
          type: string
        timeout:
          type: integer
        rpId:
          type: string
        allowCredentials:
          type: array
          items:
            type: object
      required:
        - challenge
    WebAuthnVerifyRequest:
      type: object
      properties:
        challenge:
          type: string
        response:
          type: object
      required:
        - challenge
        - response
    WebAuthnLoginStart:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    WebAuthnLoginFinish:
      type: object
      properties:
        challenge:
          type: string
        response:
          type: object
      required:
        - challenge
        - response
    SendMessageRequest:
      type: object
      properties:
        to:
          type: array
          items:
            type: string
            format: email
        cc:
          type: array
          items:
            type: string
            format: email
        bcc:
          type: array
          items:
            type: string
            format: email
        subject:
          type: string
        body:
          type: string
        htmlBody:
          type: string
        attachments:
          type: array
          items:
            type: string
            format: uuid
        priority:
          type: string
          enum:
            - low
            - normal
            - high
          default: normal
      required:
        - to
        - subject
        - body
    DraftRequest:
      type: object
      properties:
        to:
          type: array
          items:
            type: string
            format: email
        cc:
          type: array
          items:
            type: string
            format: email
        bcc:
          type: array
          items:
            type: string
            format: email
        subject:
          type: string
        body:
          type: string
        htmlBody:
          type: string
        attachments:
          type: array
          items:
            type: string
            format: uuid
    MarkMessagesRequest:
      type: object
      properties:
        messageIds:
          type: array
          items:
            type: string
            format: uuid
        action:
          type: string
          enum:
            - read
            - unread
            - flag
            - unflag
            - archive
      required:
        - messageIds
        - action
    MoveMessagesRequest:
      type: object
      properties:
        messageIds:
          type: array
          items:
            type: string
            format: uuid
        folder:
          type: string
      required:
        - messageIds
        - folder
    SnoozeMessagesRequest:
      type: object
      properties:
        messageIds:
          type: array
          items:
            type: string
            format: uuid
        snoozeUntil:
          type: string
          format: date-time
      required:
        - messageIds
        - snoozeUntil
    MailCountsResponse:
      type: object
      properties:
        folders:
          type: object
          properties:
            inbox:
              type: integer
              default: 0
            sent:
              type: integer
              default: 0
            drafts:
              type: integer
              default: 0
            trash:
              type: integer
              default: 0
            spam:
              type: integer
              default: 0
            archive:
              type: integer
              default: 0
            scheduled:
              type: integer
              default: 0
            outbox:
              type: integer
              default: 0
          required:
            - inbox
            - sent
            - drafts
            - trash
            - spam
            - archive
            - scheduled
            - outbox
        labels:
          type: object
          additionalProperties:
            type: integer
          description: Unread counts by label ID
        total:
          type: integer
          description: Total unread messages across all folders
      required:
        - folders
        - labels
        - total
    MessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - messages
        - pagination
    Pagination:
      type: object
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        hasMore:
          type: boolean
      required:
        - total
        - limit
        - offset
        - hasMore
    TrustedSenderRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        domain:
          type: string
      anyOf:
        - required:
            - email
        - required:
            - domain
    RemoveTrustedSenderRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        domain:
          type: string
      anyOf:
        - required:
            - email
        - required:
            - domain
    TrustedSendersResponse:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: "#/components/schemas/Policy"
      required:
        - policies
    UserSettings:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        theme:
          type: string
          enum:
            - light
            - dark
            - system
          default: system
        language:
          type: string
          default: en
        timezone:
          type: string
          default: UTC
        emailSignature:
          type: string
        autoReply:
          type: object
          properties:
            enabled:
              type: boolean
            message:
              type: string
            startDate:
              type: string
              format: date-time
            endDate:
              type: string
              format: date-time
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean
            desktop:
              type: boolean
        privacy:
          type: object
          properties:
            readReceipts:
              type: boolean
            trackingImages:
              type: boolean
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - theme
        - language
        - timezone
        - updatedAt
    UpdateSettingsRequest:
      type: object
      properties:
        theme:
          type: string
          enum:
            - light
            - dark
            - system
        language:
          type: string
        timezone:
          type: string
        emailSignature:
          type: string
        autoReply:
          type: object
          properties:
            enabled:
              type: boolean
            message:
              type: string
            startDate:
              type: string
              format: date-time
            endDate:
              type: string
              format: date-time
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean
            desktop:
              type: boolean
        privacy:
          type: object
          properties:
            readReceipts:
              type: boolean
            trackingImages:
              type: boolean
    UpdateScheduledRequest:
      type: object
      properties:
        sendAt:
          type: string
          format: date-time
      required:
        - sendAt
    LabelsResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
      required:
        - labels
    CreateLabelRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        color:
          type: string
          pattern: ^#[0-9A-F]{6}$
        description:
          type: string
          maxLength: 200
      required:
        - name
        - color
    UpdateLabelRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        color:
          type: string
          pattern: ^#[0-9A-F]{6}$
        description:
          type: string
          maxLength: 200
    QuarantineReleaseRequest:
      type: object
      properties:
        reason:
          type: string
          maxLength: 500
    Signature:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        content:
          type: string
        isDefault:
          type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - content
        - isDefault
        - isActive
        - createdAt
        - updatedAt
    SignaturesResponse:
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: "#/components/schemas/Signature"
      required:
        - signatures
    CreateSignatureRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        content:
          type: string
          maxLength: 5000
        isDefault:
          type: boolean
        isActive:
          type: boolean
          default: true
      required:
        - name
        - content
    UpdateSignatureRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        content:
          type: string
          maxLength: 5000
        isDefault:
          type: boolean
        isActive:
          type: boolean
    Template:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        subject:
          type: string
        content:
          type: string
        isActive:
          type: boolean
        category:
          type: string
          enum:
            - personal
            - business
            - support
            - marketing
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - subject
        - content
        - isActive
        - category
        - createdAt
        - updatedAt
    TemplatesResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: "#/components/schemas/Template"
      required:
        - templates
    CreateTemplateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        subject:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 10000
        isActive:
          type: boolean
          default: true
        category:
          type: string
          enum:
            - personal
            - business
            - support
            - marketing
          default: personal
      required:
        - name
        - subject
        - content
    UpdateTemplateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        subject:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 10000
        isActive:
          type: boolean
        category:
          type: string
          enum:
            - personal
            - business
            - support
            - marketing
    OutOfOfficeSettings:
      type: object
      properties:
        enabled:
          type: boolean
        subject:
          type: string
        message:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        sendToContacts:
          type: boolean
        sendToExternal:
          type: boolean
        contactsOnlyMessage:
          type: string
        externalMessage:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - enabled
        - updatedAt
    UpdateOutOfOfficeRequest:
      type: object
      properties:
        enabled:
          type: boolean
        subject:
          type: string
          maxLength: 200
        message:
          type: string
          maxLength: 5000
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        sendToContacts:
          type: boolean
        sendToExternal:
          type: boolean
        contactsOnlyMessage:
          type: string
          maxLength: 5000
        externalMessage:
          type: string
          maxLength: 5000
      required:
        - enabled
    SessionsResponse:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: "#/components/schemas/Session"
      required:
        - sessions
    CalendarEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              title:
                type: string
              start:
                type: string
                format: date-time
              end:
                type: string
                format: date-time
      required:
        - events
    ChatConversationsResponse:
      type: object
      properties:
        conversations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              lastMessage:
                type: string
              updatedAt:
                type: string
                format: date-time
      required:
        - conversations
    MessageResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
          default: true
      required:
        - message
        - success
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        details:
          type: object
      required:
        - error
        - message
    AuditEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ts:
          type: string
          format: date-time
        actorId:
          type: string
          format: uuid
          nullable: true
        actorEmail:
          type: string
          format: email
          nullable: true
        action:
          type: string
        resourceType:
          type: string
        resourceId:
          type: string
          nullable: true
        result:
          type: string
          enum: [SUCCESS, FAILURE]
        ip:
          type: string
          nullable: true
        userAgent:
          type: string
          nullable: true
        metadata:
          type: object
          nullable: true
        actor:
          type: object
          properties:
            id:
              type: string
              format: uuid
            email:
              type: string
              format: email
            name:
              type: string
          nullable: true
      required:
        - id
        - ts
        - action
        - resourceType
        - result
    AuditListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AuditEvent"
        nextCursor:
          type: string
          nullable: true
        totalApprox:
          type: integer
      required:
        - items
        - totalApprox
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    RateLimit:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          description: Request limit per window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Requests remaining in window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Window reset time (Unix timestamp)
          schema:
            type: integer
        Retry-After:
          description: Seconds until retry allowed
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
tags:
  - name: Health
    description: Health and readiness endpoints
  - name: Authentication
    description: Authentication and authorization
  - name: Mail
    description: Email management
  - name: Policy
    description: Security policies
  - name: Settings
    description: User preferences
  - name: Security
    description: Security sessions and device management
  - name: Admin
    description: Administrative operations
  - name: Audit
    description: Audit logging and monitoring
  - name: Calendar
    description: Calendar integration (stub)
  - name: Chat
    description: Chat integration (stub)
